##
# Project name - defaults to current directory name
#
#project_name=example

##
# VM naming pattern - defaults to {project_name}-ml{i}, also allowed: {ml_version}
#
# IMPORTANT: DON'T CHANGE ONCE YOU HAVE CREATED THE VM'S!!
#
vm_name={project_name}-ml{i}

##
# CentOS base VM version - defaults to 6.7, allowed: 5.11/6.5/6.6/6.7/7.0/7.1
#
# Note: CentOS 5(.11) does not support MarkLogic 8
vm_version=6.7

##
# Major MarkLogic release to install - defaults to 8, allowed: 5,6,7,8 (installers need to be present)
# 
ml_version=8

##
# Number of hosts in the cluster - defaults to 3, minimum for failover support
#
nr_hosts=3

##digital ocean provider specific config, DOESN'T apply for virtual box

#
# The path to the private key used for ssh with the digital ocean machines
# The public key is assumed to be in the same path with the same name with the only difference being '.pub' appended to the end
#
do_private_key_path =./id_rsa

#
# The api token, you can get this from the api section after you loging into your digital ocean account and going to the api section
# 
do_token =insertTokenHere
     
#
# The digital ocean image that will be used to generate the Droplet, the default that is set is one that runs centos 6.5 64bit 
# If you change this I recommend you stick to a centos 6 64bit version
# You can run 'vagrant digitalocean-list images $DIGITAL_OCEAN_TOKEN' to get a list of images available
# 	 
do_image =centos-6-5-x64

#
# The region where the digital ocean droplet/server will be hosted, check the digital ocean site for more info
# You can also run 'vagrant digitalocean-list regions $DIGITAL_OCEAN_TOKEN' to get a list of regions where you can host your machines
# 	
do_region =sgp1

#
# The size of the machine that will be created and run, size is measured in the ram of the machine and larger machines have higher pricing
# You can run 'vagrant digitalocean-list sizes $DIGITAL_OCEAN_TOKEN' to get a list of sizes, check digitalocean.com for detailed sizing and pricing info
# 
do_size =1gb

##end of digital ocean provider specific config


##
# Memory assigned to master node in cluster (first vm) - defaults to 2048
#
master_memory=2048

##
# Number of cpus assigned to master node in cluster (first vm) - defaults to 2
#
master_cpus=2

##
# Memory assigned to each slave node in cluster - defaults to same as master_memory
#
#slave_memory=2048

##
# Number of cpus assigned to each slave node in cluster - defaults to same as master_cpus
#
#slave_cpus=2

##
# Name of public_network to use in Vagrant - defaults to ""
#
# Note: enabling this makes your VMs accessible from outside, beware of security leaks
#
#public_network="en0: Wi-Fi (AirPort)"

##
# Assign dedicated private IP to master node - slaves get same ip + i
#
#priv_net_ip=

##
# Mount an extra folder from host on vm - project dir is automatically shared as /vagrant
#
#shared_folder_host=
#shared_folder_guest=

##
# Override hard-coded MarkLogic installers (file is searched in /space/software, or c:\space\software\ on Windows)
#
#ml_installer=MarkLogic-8.0-3.x86_64.rpm

##
# Override hard-coded MLCP installers (file is searched in /space/software, or c:\space\software\ on Windows)
#
#mlcp_installer=mlcp-1.3-3-bin.zip

##
# Run full OS updates - defaults to false
#
# Note: doing this with CentOS 6.5 or 7.0 will take it up to the very latest minor release (6.7+ resp 7.1+)
#
update_os=false

##
# Install group "Development tools" - defaults to false
#
install_dev_tools=false

##
# Install zip/unzip - defaults to true
#
# Note: Zip/unzip **not** required for MLCP (provided through Java)
#
install_zip=true

##
# Install Java - defaults to true
#
# Note: necessary for MLCP
# Note: installs JDK 8 currently
install_java=true

##
# Install MarkLogic Content Pump - defaults to true
#
# Note: installs an MLCP version that matches ml_version, unless an explicit mlcp_installer was specified
#
install_mlcp=true

##
# Install Node.js, npm, bower, gulp, forever (globally) - defaults to true
#
install_nodejs=true

##
# Install Ruby - default to true
#
# Note: Ruby is mostly already installed on CentOS, this is just to be certain
#
install_ruby=true

##
# Install Git command-line tools - defaults to true
#
install_git=true

##
# Initializes a bare Git repository under /space/projects, along with a user named {project_name} to use it
#
install_git_project=true

##
# Install Tomcat, and enable the service - defaults to true
#
# Note: Tomcat could be pre-installed, but usually isn't enabled by default. This will make sure it is installed, and enabled.
# Note: on CentOS 5 you get Tomcat 5 (tomcat5), on CentOS 6 you get Tomcat 6 (tomcat6), on CentOS 7 you get Tomcat 7 (tomcat)
#
install_tomcat=true
